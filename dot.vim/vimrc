scriptencoding utf-8

if &shell =~# 'fish$'
  set shell=bash
end

"Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

call plug#begin('~/.vim/plugged')

Plug 'tyru/eskk.vim'

" colorschema
Plug 'flazz/vim-colorschemes'

" text-obj
Plug 'kana/vim-textobj-fold'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-lastpat'
Plug 'kana/vim-textobj-user'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'thinca/vim-textobj-function-javascript'

Plug 'Blackrush/vim-gocode'
Plug 'Rename'
Plug 'SuperTab'
Plug 'csexton/trailertrash.vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'ecomba/vim-ruby-refactoring'
Plug 'editorconfig/editorconfig-vim'
Plug 'elixir-lang/vim-elixir'
Plug 'h1mesuke/vim-alignta'
Plug 'hail2u/vim-css3-syntax'
Plug 'itchyny/lightline.vim'
Plug 'kana/vim-fakeclip'
Plug 'kana/vim-smartinput'
Plug 'kchmck/vim-coffee-script'
Plug 'majutsushi/tagbar'
Plug 'matchit.zip'
Plug 'mattn/ctrlp-ghq'
Plug 'mattn/emmet-vim'
Plug 'mattn/gist-vim'
Plug 'mattn/webapi-vim'
Plug 'maxbrunsfeld/vim-yankstack'
Plug 'puppetlabs/puppet-syntax-vim'
Plug 'repeat.vim'
Plug 'slim-template/vim-slim'
Plug 'taglist.vim'
Plug 'tpope/vim-cucumber'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-haml'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-surround'
Plug 'vim-ruby/vim-ruby'
Plug 'vimwiki'

call plug#end()

filetype plugin indent on

set rtp+=$GOROOT/misc/vim
exe "set rtp+=" . globpath($GOPATH, "src/github.com/golang/lint/misc/vim")

syntax enable

set term=screen-256color
set t_Co=256
set background=light
colorscheme lucius
hi Pmenu ctermbg=4

set ambiwidth=double
set autoread
set hidden
set number
set showmatch
set ttymouse=xterm2
set wildmode=list:longest,list:full

set directory-=.

"backup
set nobackup

"encoding
set enc=utf-8
set fenc=utf-8
set fencs=utf-8,iso-2022-jp,euc-jp,cp932
set fileformats=unix,dos

"Tab
set expandtab
set smartindent
set sw=2 sts=2

"search
set nohlsearch
set ignorecase
set smartcase
set incsearch

"statusline
set laststatus=2

set clipboard=unnamed

set backspace=indent,eol,start

" keymap
nnoremap j gj
nnoremap k gk

nnoremap wh <C-w>h
nnoremap wj <C-w>j
nnoremap wk <C-w>k
nnoremap wl <C-w>l

nnoremap Y y$

nnoremap ; :
nnoremap : ;

nnoremap <Space>. :<C-u>edit $MYVIMRC<CR>
nnoremap <Space>s. :<C-u>source $MYVIMRC<CR>

cnoremap <C-a> <Home>
cnoremap <C-x> <C-r>=expand('%:p:h')<CR>/
cnoremap <expr> / getcmdtype() == '/' ? '\/' : '/'

" <Leader>
inoremap <Leader>date <C-R>=strftime('%Y/%m/%d(%a)')<CR>
inoremap <Leader>time <C-R>=strftime('%H:%M:%S')<CR>

" vimwiki
let g:vimwiki_list = [{'path': '~/Dropbox/vimwiki', 'syntax': 'markdown', 'ext': '.md'}]

" show invisibles
nmap <leader>l :set list!<CR>
set listchars=tab:▸\ ,eol:¬

" eskk.vim
if has('mac')
  let g:eskk#large_dictionary = {
  \  'path': "~/Library/Application\ Support/AquaSKK/SKK-JISYO.L",
  \  'sorted': 1,
  \  'encoding': 'euc-jp',
  \}

  let g:eskk#server= {
  \  'host': 'localhost',
  \  'port': 1178,
  \}
endif

" tagbar
nnoremap <silent> <space>t :TagbarToggle<CR>
let g:tagbar_type_ruby = {
    \ 'kinds' : [
        \ 'm:modules',
        \ 'c:classes',
        \ 'd:describes',
        \ 'C:contexts',
        \ 'f:methods',
        \ 'F:singleton methods'
    \ ]
\ }

" ctrlp-ghq
noremap <space>g :<c-u>CtrlPGhq<CR>

augroup MyAutoCmd
  autocmd!

  "自動的に QuickFix リストを表示する
  autocmd QuickfixCmdPost make,grep,grepadd,vimgrep,vimgrepadd cwin

  autocmd BufWritePost $MYVIMRC nested source $MYVIMRC | if has('gui_running') | source $MYGVIMRC
  autocmd BufWritePost $MYGVIMRC if has('gui_running') | source $MYGVIMRC

  autocmd BufNewFile,BufRead COMMIT_EDITMSG set filetype=git fenc=utf-8

  autocmd FileType php setlocal sw=4 sts=4
  autocmd FileType ruby setlocal sw=2 sts=2
augroup END

let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

let g:ctrlp_extentiuons = ['quickfix']

set grepprg=pt\ --nogroup\ --nocolor
