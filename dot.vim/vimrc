scriptencoding utf-8

"Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

if has('vim_starting')
  set nocompatible
  set runtimepath+=/Users/kenchan/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('/Users/kenchan/.vim/bundle'))

NeoBundleFetch 'Shougo/neobundle.vim'

NeoBundle 'tyru/eskk.vim'

" colorschema
NeoBundle '29decibel/codeschool-vim-theme'
NeoBundle 'Lucius'
NeoBundle 'Solarized'
NeoBundle 'aereal/vim-magica-colors'
NeoBundle 'jpo/vim-railscasts-theme'
NeoBundle 'mayansmoke'
NeoBundle 'pyte'
NeoBundle 'xoria256.vim'
NeoBundle 'junegunn/seoul256.vim'

NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'flazz/vim-colorschemes'
NeoBundle 'Blackrush/vim-gocode'
NeoBundle 'Rename'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/vimfiler'
NeoBundle 'SuperTab'
NeoBundle 'basyura/unite-rails'
NeoBundle 'csexton/trailertrash.vim'
NeoBundle 'ecomba/vim-ruby-refactoring'
NeoBundle 'h1mesuke/unite-outline'
NeoBundle 'h1mesuke/vim-alignta'
NeoBundle 'hail2u/vim-css3-syntax'
NeoBundle 'itchyny/lightline.vim'
NeoBundle 'kana/vim-smartinput'
NeoBundle 'kana/vim-textobj-fold'
NeoBundle 'kana/vim-textobj-indent'
NeoBundle 'kana/vim-textobj-lastpat'
NeoBundle 'kana/vim-textobj-user'
NeoBundle 'kana/vim-fakeclip'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'ctrlpvim/ctrlp.vim'
NeoBundle 'matchit.zip'
NeoBundle 'mattn/gist-vim'
NeoBundle 'mattn/ctrlp-ghq'
NeoBundle 'mattn/webapi-vim'
NeoBundle 'maxbrunsfeld/vim-yankstack'
NeoBundle 'nelstrom/vim-textobj-rubyblock'
NeoBundle 'repeat.vim'
NeoBundle 'rking/ag.vim'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'slim-template/vim-slim'
NeoBundle 'taglist.vim'
NeoBundle 'tpope/vim-cucumber'
NeoBundle 'tpope/vim-dispatch'
NeoBundle 'tpope/vim-endwise'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-haml'
NeoBundle 'tpope/vim-rails'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tsukkee/unite-help'
NeoBundle 'tsukkee/unite-tag'
NeoBundle 'vim-ruby/vim-ruby'
NeoBundle 'vimwiki'
NeoBundle 'puppetlabs/puppet-syntax-vim'
NeoBundle 'majutsushi/tagbar'

call neobundle#end()

filetype plugin indent on

NeoBundleCheck

set rtp+=$GOROOT/misc/vim
exe "set rtp+=" . globpath($GOPATH, "src/github.com/golang/lint/misc/vim")

syntax enable

set term=screen-256color
set t_Co=256
set background=light
let g:solarized_termtrans=1
colorscheme seoul256-light
hi Pmenu ctermbg=4

set ambiwidth=double
set autoread
set hidden
set number
set showmatch
set ttymouse=xterm2
set wildmode=list:longest,list:full

set directory-=.

"backup
set nobackup

"encoding
set enc=utf-8
set fenc=utf-8
set fencs=utf-8,iso-2022-jp,euc-jp,cp932
set fileformats=unix,dos

"Tab
set expandtab
set smartindent
set ts=2 sw=2 sts=2

"search
set nohlsearch
set ignorecase
set smartcase
set incsearch

"statusline
set laststatus=2

set clipboard=unnamed

set backspace=indent,eol,start

" keymap
nnoremap j gj
nnoremap k gk

nnoremap wh <C-w>h
nnoremap wj <C-w>j
nnoremap wk <C-w>k
nnoremap wl <C-w>l

nnoremap Y y$

nnoremap ; :
nnoremap : ;

nnoremap <Space>. :<C-u>edit $MYVIMRC<CR>
nnoremap <Space>s. :<C-u>source $MYVIMRC<CR>

cnoremap <C-a> <Home>
cnoremap <C-x> <C-r>=expand('%:p:h')<CR>/
cnoremap <expr> / getcmdtype() == '/' ? '\/' : '/'

" <Leader>
inoremap <Leader>date <C-R>=strftime('%Y/%m/%d(%a)')<CR>
inoremap <Leader>time <C-R>=strftime('%H:%M:%S')<CR>

" unite.vim
nnoremap <silent> ,uf :<C-u>Unite file<CR>
nnoremap <silent> ,uu :<C-u>Unite buffer file_mru<CR>
nnoremap <silent> ,uo :<C-u>Unite outline<CR>
nnoremap <silent> ,ua :<C-u>Unite alignta<CR>
nnoremap <silent> ,uh :<C-u>Unite help<CR>

" unite-alignta
let g:unite_source_alignta_preset_arguments = [
  \ ["Align at ':'", '<<0 \ /1 :'],
  \]

if executable('pt')
  let g:unite_source_grep_command = 'pt'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor'
  let g:unite_source_grep_recursive_opt = ''
  let g:unite_source_grep_encoding = 'utf-8'
endif

" vimwiki
let g:vimwiki_list = [{'path': '~/Dropbox/vimwiki', 'syntax': 'markdown', 'ext': '.md'}]

" vimfiler
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_safe_mode_by_default = 0

" show invisibles
nmap <leader>l :set list!<CR>
set listchars=tab:▸\ ,eol:¬

" syntastic
let g:syntastic_auto_loc_list = 1
let g:syntastic_loc_list_height = 3

" eskk.vim
if has('mac')
  let g:eskk#large_dictionary = {
  \  'path': "~/Library/Application\ Support/AquaSKK/SKK-JISYO.L",
  \  'sorted': 1,
  \  'encoding': 'euc-jp',
  \}
endif

" tagbar
nnoremap <silent> <space>t :TagbarToggle<CR>
let g:tagbar_type_ruby = {
    \ 'kinds' : [
        \ 'm:modules',
        \ 'c:classes',
        \ 'd:describes',
        \ 'C:contexts',
        \ 'f:methods',
        \ 'F:singleton methods'
    \ ]
\ }

" ctrlp-ghq
noremap <space>g :<c-u>CtrlPGhq<CR>

augroup MyAutoCmd
  autocmd!

  "自動的に QuickFix リストを表示する
  autocmd QuickfixCmdPost make,grep,grepadd,vimgrep,vimgrepadd cwin

  autocmd BufWritePost $MYVIMRC nested source $MYVIMRC | if has('gui_running') | source $MYGVIMRC
  autocmd BufWritePost $MYGVIMRC if has('gui_running') | source $MYGVIMRC

  autocmd BufWritePre * :TrailerTrim
augroup END
