set termguicolors
scriptencoding utf-8

if &shell =~# 'fish$'
  set shell=bash
end

"Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

call plug#begin('~/.vim/plugged')

Plug '907th/vim-auto-save'
Plug 'tyru/open-browser.vim'

" colorschema
Plug 'arcticicestudio/nord-vim'

" UI
Plug 'itchyny/lightline.vim'
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'

" Find and Grep
Plug 'pocke/tnite.vim'

" text-obj
Plug 'kana/vim-textobj-fold'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-lastpat'
Plug 'kana/vim-textobj-user'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'thinca/vim-textobj-function-javascript'
Plug 'tpope/vim-surround'

" text edit
Plug '907th/vim-auto-save'
Plug 'LeafCage/yankround.vim'
Plug 'ervandew/supertab'
Plug 'h1mesuke/vim-alignta'
Plug 'kana/vim-smartinput'
Plug 'mattn/sonictemplate-vim'
Plug 'plasticboy/vim-markdown'
Plug 'previm/previm'
Plug 'tpope/vim-fugitive'
Plug 'vim-scripts/Rename'
Plug 'vim-scripts/matchit.zip'
Plug 'vim-scripts/repeat.vim'
Plug 'vim-scripts/vimwiki'

" Programming
Plug 'editorconfig/editorconfig-vim'
Plug 'w0rp/ale'
Plug 'janko-m/vim-test'

" Golang
Plug 'Blackrush/vim-gocode'
Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }

" Ruby and Rails
Plug 'ecomba/vim-ruby-refactoring'
Plug 'tpope/vim-cucumber'
Plug 'tpope/vim-rails'
Plug 'vim-ruby/vim-ruby'

" Web
Plug 'hail2u/vim-css3-syntax'
Plug 'slim-template/vim-slim'
Plug 'tpope/vim-haml'

" Puppet
Plug 'puppetlabs/puppet-syntax-vim'

" Rust
Plug 'rust-lang/rust.vim'

call plug#end()

filetype plugin indent on

syntax enable

set term=xterm-256color
set background=dark
colorscheme nord
hi Pmenu ctermbg=4

set ambiwidth=double
set autoread
set hidden
set number
set showmatch
set ttymouse=xterm2
set wildmode=list:longest,list:full
set cursorline

set directory-=.

"backup
set nobackup

"encoding
set enc=utf-8
set fenc=utf-8
set fencs=utf-8,iso-2022-jp,euc-jp,cp932
set fileformats=unix,dos

"Tab
set expandtab
set smartindent
set sw=2 sts=2

"search
set nohlsearch
set ignorecase
set smartcase
set incsearch

"statusline
set laststatus=2

set clipboard=unnamedplus

set backspace=indent,eol,start

" keymap
nnoremap j gj
nnoremap k gk

nnoremap wh <C-w>h
nnoremap wj <C-w>j
nnoremap wk <C-w>k
nnoremap wl <C-w>l

nnoremap Y y$

nnoremap ; :
nnoremap : ;

nnoremap <Space>. :<C-u>edit $MYVIMRC<CR>
nnoremap <Space>s. :<C-u>source $MYVIMRC<CR>

cnoremap <C-a> <Home>
cnoremap <C-x> <C-r>=expand('%:p:h')<CR>/
cnoremap <expr> / getcmdtype() == '/' ? '\/' : '/'

" <Leader>
let mapleader = "\<Space>"

" vimwiki
let g:vimwiki_list = [{'path': '~/Dropbox/vimwiki', 'syntax': 'markdown', 'ext': '.md'}]
let g:vimwiki_global_ext = 0

" show invisibles
nmap <leader>l :set list!<CR>
set listchars=tab:▸\ ,eol:¬

" tagbar
nnoremap <silent> <space>t :TagbarToggle<CR>
let g:tagbar_type_ruby = {
    \ 'kinds' : [
        \ 'm:modules',
        \ 'c:classes',
        \ 'd:describes',
        \ 'C:contexts',
        \ 'f:methods',
        \ 'F:singleton methods'
    \ ]
\ }

" lightline
let g:lightline = {
  \ 'colorscheme': 'one',
  \ 'active': {
  \   'left': [ ['mode', 'paste'],
  \             [ 'gitbranch', 'readonly', 'filename', 'modified'] ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'fugitive#head'
  \ },
  \}

" markdown
let g:vim_markdown_folding_disabled = 1

" yankround
nmap p <Plug>(yankround-p)
xmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap gp <Plug>(yankround-gp)
xmap gp <Plug>(yankround-gp)
nmap gP <Plug>(yankround-gP)
nmap <C-p> <Plug>(yankround-prev)
nmap <C-n> <Plug>(yankround-next)

augroup MyAutoCmd
  autocmd!

  "自動的に QuickFix リストを表示する
  autocmd QuickfixCmdPost make,grep,grepadd,vimgrep,vimgrepadd cwin

  autocmd BufWritePost $MYVIMRC nested source $MYVIMRC | if has('gui_running') | source $MYGVIMRC
  autocmd BufWritePost $MYGVIMRC if has('gui_running') | source $MYGVIMRC

  autocmd BufNewFile,BufRead COMMIT_EDITMSG set filetype=git fenc=utf-8

  autocmd FileType php setlocal sw=4 sts=4
  autocmd FileType ruby setlocal sw=2 sts=2

  autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4
augroup END

" gtags.vim
let g:Gtags_Close_When_Single = 1
noremap <c-]> :GtagsCursor<CR>

"ale
let g:ale_sign_column_always = 1
let g:ale_fix_on_save = 1

let g:ale_linters = {
  \ 'ruby':  ['ruby'],
  \ 'go':  ['gofmt'],
  \ }

let g:ale_fixers = {
  \ '*': ['trim_whitespace', 'remove_trailing_lines']
\}

set modeline

" sonictemplate
let g:sonictemplate_vim_template_dir = [
\ '$HOME/.vim/template'
\]

let g:github_enterprise_urls = ['https://git.pepabo.com/']

" previm
let g:previm_open_cmd = "xdg-open"

" tnite
nnoremap <silent><Leader>f :<C-u>call tnite#start(["sh", "-c", "fd \| peco --layout=top-down --initial-filter Fuzzy"], "edit", {})<CR>
nnoremap <silent><Leader>g :<C-u>call tnite#start(["sh", "-c", "rg --line-number " . shellescape(expand('<cword>')) . " \| peco --layout=top-down --initial-filter  Fuzzy \| cut -d : -f 1,2"], "edit", {"jump_to_line": v:true})<CR>

" auto save
let g:auto_save = 1
let g:auto_save_silent = 1
